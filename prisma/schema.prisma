generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Role {
  id    Int    @id @default(autoincrement())
  role  String @db.VarChar(100)
  users User[]
}

model User {
  id        String   @id @default(cuid())
  name      String   @map("username") @db.VarChar(100)
  email     String   @unique
  password  String   @unique
  roleId    Int      @default(3)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  role      Role     @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Product {
  id           String         @id @default(cuid())
  name         String         @unique @default("") @map("product_name") @db.VarChar(200)
  type         String         @default("")
  gramPerUnit  Int            @default(0)
  unitPerPack  Int            @default(0)
  OrderProduct OrderProduct[]

  @@map("products")
}

model Customer {
  id        String  @id @default(cuid())
  name      String  @unique @map("customer_name") @db.VarChar(200)
  contactWA String? @db.VarChar(200)
  orders    Order[]

  @@map("customers")
}

model OrderStatus {
  id     Int     @id @default(autoincrement())
  status String  @db.VarChar(100)
  orders Order[]
}

model Order {
  id            String         @id @default(cuid())
  customerId    String         @default("CUSTOMER_404")
  orderedAt     DateTime       @default(now()) @map("order_date")
  deliveryAt    DateTime       @default(dbgenerated("(now() + '1 day'::interval)"))
  isPaid        Boolean        @default(false)
  updatedAt     DateTime       @updatedAt @map("updated_at")
  orderStatusId Int            @default(1)
  orderlist     OrderProduct[]
  customer      Customer       @relation(fields: [customerId], references: [id])
  orderStatus   OrderStatus    @relation(fields: [orderStatusId], references: [id])

  @@map("orders")
}

model OrderProduct {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@map("orderproducts")
}
